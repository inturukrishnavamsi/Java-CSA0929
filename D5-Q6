import java.util.HashSet;
import java.util.Set;

public class UniquePermutations {
    public static void main(String[] args) {
        int number = 123; // Change this to the desired number

        Set<String> uniquePermutations = findUniquePermutations(number);
        
        System.out.println("Unique permutations of " + number + ":");
        for (String permutation : uniquePermutations) {
            System.out.println(permutation);
        }
    }

    public static Set<String> findUniquePermutations(int number) {
        Set<String> result = new HashSet<>();
        String numString = String.valueOf(number);
        boolean[] used = new boolean[numString.length()];
        StringBuilder currentPermutation = new StringBuilder();
        
        generatePermutations(numString, used, currentPermutation, result);
        
        return result;
    }

    public static void generatePermutations(String numString, boolean[] used, StringBuilder currentPermutation, Set<String> result) {
        if (currentPermutation.length() == numString.length()) {
            result.add(currentPermutation.toString());
            return;
        }

        for (int i = 0; i < numString.length(); i++) {
            if (!used[i]) {
                used[i] = true;
                currentPermutation.append(numString.charAt(i));

                generatePermutations(numString, used, currentPermutation, result);

                currentPermutation.deleteCharAt(currentPermutation.length() - 1);
                used[i] = false;
            }
        }
    }
}
